<?php
/*
* 2007-2013 PrestaShop
*
* NOTICE OF LICENSE
*
* This source file is subject to the Academic Free License (AFL 3.0)
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://opensource.org/licenses/afl-3.0.php
* If you did not receive a copy of the license and are unable to
* obtain it through the world-wide-web, please send an email
* to license@prestashop.com so we can send you a copy immediately.
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to upgrade PrestaShop to newer
* versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author PrestaShop SA <contact@prestashop.com>
*  @copyright  2007-2013 PrestaShop SA
*  @license    http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
*  International Registered Trademark & Property of PrestaShop SA
*/
require 'codLibFunctions.php';
if (!defined('_PS_VERSION_'))
    exit;
define('_CCAVENUE_COD_SUCCESS', 'Thank you for placing the order, %s.We have received Rs.%s. Your order is being processed. Please check your email for additional details.-MILAGROW');
define('_CCAVENUE_COD_LOGISTIC_EMAIL', 'outboundlogistics@milagrow.in');
define('_CCAVENUE_COD_RECEIVABLE_EMAIL', 'receivables@milagrow.in');
//define('_CCAVENUE_COD_LOGISTIC_EMAIL', 'ptailor@greenapplesolutions.com');
//define('_CCAVENUE_COD_RECEIVABLE_EMAIL', 'ptailor@greenapplesolutions.com');
class COD extends PaymentModule
{
    public function __construct()
    {
        $this->name = 'cod';
        $this->tab = 'payments_gateways';
        $this->version = '1.0';
        $this->author = 'GAPS';
        $this->need_instance = 1;

        $this->currencies = true;
        $this->currencies_mode = 'radio';

        parent::__construct();

        $this->displayName = $this->l('COD');
        $this->description = $this->l('Accept COD Partial Payment developed by GAPS');

        /* For 1.4.3 and less compatibility */
        $updateConfig = array('PS_OS_CHEQUE', 'PS_OS_PAYMENT', 'PS_OS_PREPARATION', 'PS_OS_SHIPPING', 'PS_OS_CANCELED', 'PS_OS_REFUND', 'PS_OS_ERROR', 'PS_OS_OUTOFSTOCK', 'PS_OS_BANKWIRE', 'PS_OS_PAYPAL', 'PS_OS_WS_PAYMENT');
        if (!Configuration::get('PS_OS_PAYMENT'))
            foreach ($updateConfig as $u)
                if (!Configuration::get($u) && defined('_' . $u . '_'))
                    Configuration::updateValue($u, constant('_' . $u . '_'));
    }

    public function install()
    {
        /* initialisation of configuration key value */
        return parent::install() && $this->registerHook('payment') && $this->registerHook('orderConfirmation')
        && Configuration::updateValue('COD_PARTIAL_PAYMENT_SUCCESS', $this->_addCODPartialSuccessState()) && Configuration::updateValue('COD_PARTIAL_PAYMENT_PENDING', $this->_addCODPendingState());
    }

    /******************************************************************/
    /** Add payment state: COD: Partial Payment Pending ******************/
    /** For order that are still in pending verification **************/
    /******************************************************************/
    private function _addCODPendingState()
    {
        $orderState = new OrderState();
        $orderState->name = array();
        foreach (Language::getLanguages() as $language)
            $orderState->name[$language['id_lang']] = $this->l('COD: Partial Payment Pending');
        $orderState->send_email = false;
        $orderState->color = '#DDEEFF';
        $orderState->hidden = false;
        $orderState->delivery = false;
        $orderState->logable = true;
        $orderState->invoice = true;
        if ($orderState->add())
            copy(dirname(__FILE__) . '/logo.gif', dirname(__FILE__) . '/../../img/os/' . (int)$orderState->id . '.gif');
        return $orderState->id;
    }

    /******************************************************************/
    /** Add payment state: COD: Partial Payment Success ******************/
    /** For order that are still in pending verification **************/
    /******************************************************************/
    private function _addCODPartialSuccessState()
    {
        $orderState = new OrderState();
        $orderState->name = array();
        foreach (Language::getLanguages() as $language)
            $orderState->name[$language['id_lang']] = $this->l('COD: Partial Payment Success');
        $orderState->send_email = false;
        $orderState->color = '#FFCC66';
        $orderState->hidden = false;
        $orderState->delivery = false;
        $orderState->logable = true;
        $orderState->invoice = true;
        if ($orderState->add())
            copy(dirname(__FILE__) . '/logo.gif', dirname(__FILE__) . '/../../img/os/' . (int)$orderState->id . '.gif');
        return $orderState->id;
    }

    public function hookPayment($params)
    {
        if (!$this->active)
            return;

        global $smarty;

        // Check if cart has product download
        foreach ($params['cart']->getProducts() AS $product) {
            $pd = ProductDownload::getIdFromIdProduct((int)($product['id_product']));
            if ($pd AND Validate::isUnsignedInt($pd))
                return false;
        }

        $context = Context::getContext();
        $isCODAllowed = true;
        $orderProducts = $params['cart']->getProducts();
        $totalProductsQuantityCount = 0;


        foreach ($orderProducts as $product) {
            $totalProductsQuantityCount += $product['cart_quantity'];
        }

        if ($totalProductsQuantityCount > 1) {
            $isCODAllowed = false;
            $errorMsg = 'product_count_error';

        } elseif ($context->cart->getOrderTotal() < 2000) {
            $isCODAllowed = false;
            $errorMsg = 'order_total_error';
        } else {
            //add custom code to allow cod for pin codes if user pin code lie in the list then allow else reject
            $cart_delivery_option = $this->context->cart->getDeliveryOption();
            $errorsString = 'Sorry currently we are not providing COD service to address you have chosen for delivery.Go back and change Address or choose different payment option. \r\n\n Errors in following postal codes: \n\n';
            $addressErrors = array();
            foreach ($cart_delivery_option as $key => $deliveryAddressId) {
                $delivery = new Address($key);
                $status = $this->checkCODAvailability($delivery->postcode);
                if (!$status) {
                    $isCODAllowed = false;
                    $errorsString .= $delivery->postcode;
                    $addressErrors[] = $delivery;
                    $errorMsg = 'address_error';
                }
            }

        }

        //check for the product is back order or not
        if ($isCODAllowed) {
            $productDetail = Product::getProductProperties($context->language->id, array('id_product' => $orderProducts[0]['id_product']));
            if ($productDetail['quantity'] <= 0) {
                $isCODAllowed = false;
                $errorMsg = 'quantity_error';
            }

        }


        $smarty->assign(array(
            'this_path' => $this->_path,
            'this_path_ssl' => Tools::getShopDomainSsl(true, true) . __PS_BASE_URI__ . 'modules/' . $this->name . '/',
            'cod_available' => $isCODAllowed,
            'error' => errorsString,
            'error_case' => $errorMsg,
            'addressErrors' => $addressErrors
        ));

        return $this->display(__FILE__, 'payment.tpl');
    }

    private function checkCODAvailability($pincode)
    {
        $sql = 'select cod_available from ' . _DB_PREFIX_ . 'pincode_cod where pincode=\'' . $pincode . '\'';
        $row = Db::getInstance()->getRow($sql);
        if ($row)
            return $row['cod_available'];
        else
            return 0;
    }

    /* Final validate function Called when an order was placed and CCAvenue is keeping us posted about the payment validation */
    public function validation()
    {
        $context = context::getContext();
        $card_expiration = '';
        $card_holder = '';
        $MerchantId = isset($_REQUEST["Merchant_Id"]) ? $_REQUEST["Merchant_Id"] : '';
        $OrderId = isset($_REQUEST["Order_Id"]) ? $_REQUEST["Order_Id"] : '';
        $Amount = isset($_REQUEST["Amount"]) ? $_REQUEST["Amount"] : '';
        $AuthDesc = isset($_REQUEST["AuthDesc"]) ? $_REQUEST["AuthDesc"] : '';
        $avnChecksum = isset($_REQUEST["Checksum"]) ? $_REQUEST["Checksum"] : '';
        $nb_order_no = isset($_REQUEST["nb_order_no"]) ? $_REQUEST['nb_order_no'] : '';

        //as we are not getting card number from ccavenue we are using this field for storing whether emi 3 months used or 6 months used
        $card_number = isset($_REQUEST["Merchant_Param"]) ? $_REQUEST["Merchant_Param"] : '';
        //and card holder is used to store percentage of EMI processing fee
        $merchantIdUsed = Configuration::get('CCAVENUE_MERCHANT_ID');
        $workingKey = Configuration::get('CCAVENUE_WORKING_KEY');
        $context->cookie->balanceCOD = $this->getBalanceCODAmount($this->context->cart->getOrderTotal(true, Cart::BOTH), $Amount);

        $Checksum = verifyChecksumCOD($merchantIdUsed, $OrderId, $Amount, $AuthDesc, $workingKey, $avnChecksum);

        $billing_cust_name = isset($_REQUEST["billing_cust_name"]) ? $_REQUEST["billing_cust_name"] : '';
        $billing_cust_address = isset($_REQUEST["billing_cust_address"]) ? $_REQUEST["billing_cust_address"] : '';
        $billing_cust_state = isset($_REQUEST["billing_cust_state"]) ? $_REQUEST["billing_cust_state"] : '';
        $billing_cust_city = isset($_REQUEST["billing_cust_city"]) ? $_REQUEST["billing_cust_city"] : '';
        $billing_zip_code = isset($_REQUEST["billing_zip_code"]) ? $_REQUEST["billing_zip_code"] : '';
        $billing_cust_country = isset($_REQUEST["billing_cust_country"]) ? $_REQUEST["billing_cust_country"] : '';
        $billing_cust_tel = isset($_REQUEST["billing_cust_tel"]) ? $_REQUEST['billing_cust_tel'] : '';
        $billing_cust_email = isset($_REQUEST["billing_cust_email"]) ? $_REQUEST["billing_cust_email"] : '';

        $card_category = isset($_REQUEST["card_category"]) ? $_REQUEST["card_category"] : '';
        $cart_id = (int)str_replace('COD_', '', $OrderId);
        $cart = new Cart($cart_id);
        $extraVars = array('transaction_id' => $nb_order_no);
        if ($Checksum && $AuthDesc == 'Y') {
            $this->validateOrder((int)$cart->id, (int)Configuration::get('COD_PARTIAL_PAYMENT_SUCCESS'), (float)$Amount, 'COD', 'Your credit card has been charged and the advance amount for order is successfully received.', $extraVars, null, false, $cart->secure_key);

            $orders = $this->getAllOrdersForGivenCart((int)$cart->id);

            $customer_message_sql = 'Select message from ' . _DB_PREFIX_ . 'message Where id_cart = '. $cart_id . ' and id_order = '. $orders[0]['id_order'] .' ';
            $customer_message = Db::getInstance()->ExecuteS($customer_message_sql);

            $context->cookie->balanceCOD = null;
            $billingAddress = array('firstname' => $billing_cust_name, 'lastname' => '', 'state' => $billing_cust_state, 'phone' => $billing_cust_tel, 'postcode' => $billing_zip_code, 'city' => $billing_cust_city, 'address1' => $billing_cust_address, 'address2' => '', 'country' => $billing_cust_country);

            $billing = new Address($context->cart->id_address_invoice);
            $SMS_Mobile = $billing->phone_mobile;
            $this->sendMessage($orders[0]['reference'], $Amount, $SMS_Mobile);

            $this->sendEmailToCustomer($billingAddress, $orders[0]['reference'], $orders[0]['id_order'], $Amount, 1,$customer_message[0]['message']);

            $redirect = __PS_BASE_URI__ . 'module/cod/success';
            header('Location: ' . $redirect);
            exit;
        } elseif ($Checksum && $AuthDesc === "B") {
            $this->validateOrder((int)$cart->id, (int)Configuration::get('COD_PARTIAL_PAYMENT_PENDING'), (float)$Amount, $this->displayName, $this->l('The transaction is in pending verification'), $extraVars, null, false, $cart->secure_key);
            //finding order for EMI
            $orders = $this->getAllOrdersForGivenCart((int)$cart->id);
            //removing EMI Amount from cookie
            $context->cookie->balanceCOD = null;
            $redirect = __PS_BASE_URI__ . 'module/cod/success';
            header('Location: ' . $redirect);
            exit;
        } elseif ($Checksum && $AuthDesc === "N") {
            $this->validateOrder((int)$cart->id, (int)Configuration::get('PS_OS_ERROR'), (float)$Amount, $this->displayName, $this->l('The transaction has been declined'), $extraVars, null, false, $cart->secure_key);

            $orders = $this->getAllOrdersForGivenCart((int)$cart->id);
            $billingAddress = array('firstname' => $billing_cust_name, 'lastname' => '', 'state' => $billing_cust_state, 'phone' => $billing_cust_tel, 'postcode' => $billing_zip_code, 'city' => $billing_cust_city, 'address1' => $billing_cust_address, 'address2' => '', 'country' => $billing_cust_country);

            $customer_message_sql = 'Select message from ' . _DB_PREFIX_ . 'message Where id_cart = '. $cart_id . ' and id_order = '. $orders[0]['id_order'] .' ';
            $customer_message = Db::getInstance()->ExecuteS($customer_message_sql);

            $order_status = new OrderState((int)$orders[0]['current_state'], (int)$this->context->language->id);
            $order_payment_status = (int)$order_status->paid;
            $this->sendEmailToCustomer($billingAddress, $orders[0]['reference'], $orders[0]['id_order'], $Amount, $order_payment_status,$customer_message[0]['message']);
            //no need to map any order entry
            $context->cookie->balanceCOD = null;
            $redirect = __PS_BASE_URI__ . 'module/cod/error';
            header('Location: ' . $redirect);
            exit;
        } else {
            $redirect = __PS_BASE_URI__ . 'module/cod/error';
            $context->cookie->balanceCOD = null;
            header('Location: ' . $redirect);
            exit;
        }

    }


    /* test validation function for success case */
//    public function validation()
//    {
//        $context = context::getContext();
//        $card_expiration = '';
//        $card_holder = '';
//        $MerchantId = isset($_REQUEST["Merchant_Id"]) ? $_REQUEST["Merchant_Id"] : '';
//        $OrderId = isset($_REQUEST["Order_Id"]) ? $_REQUEST["Order_Id"] : '';
//        $Amount = isset($_REQUEST["Amount"]) ? $_REQUEST["Amount"] : '';
//        $AuthDesc = isset($_REQUEST["AuthDesc"]) ? $_REQUEST["AuthDesc"] : '';
//        $avnChecksum = isset($_REQUEST["Checksum"]) ? $_REQUEST["Checksum"] : '';
//        $nb_order_no = isset($_REQUEST["nb_order_no"]) ? $_REQUEST['nb_order_no'] : '';
//
//        //as we are not getting card number from ccavenue we are using this field for storing whether emi 3 months used or 6 months used
//        $card_number = isset($_REQUEST["Merchant_Param"]) ? $_REQUEST["Merchant_Param"] : '';
//        //and card holder is used to store percentage of EMI processing fee
//        $merchantIdUsed = Configuration::get('CCAVENUE_MERCHANT_ID');
//        $workingKey = Configuration::get('CCAVENUE_WORKING_KEY');
//        $context->cookie->balanceCOD = $this->getBalanceCODAmount($this->context->cart->getOrderTotal(true, Cart::BOTH), $Amount);
//
//        $Checksum = verifyChecksumCOD($merchantIdUsed, $OrderId, $Amount, $AuthDesc, $workingKey, $avnChecksum);
//
//        $billing_cust_name = isset($_REQUEST["billing_cust_name"]) ? $_REQUEST["billing_cust_name"] : '';
//        $billing_cust_address = isset($_REQUEST["billing_cust_address"]) ? $_REQUEST["billing_cust_address"] : '';
//        $billing_cust_state = isset($_REQUEST["billing_cust_state"]) ? $_REQUEST["billing_cust_state"] : '';
//        $billing_cust_city = isset($_REQUEST["billing_cust_city"]) ? $_REQUEST["billing_cust_city"] : '';
//        $billing_zip_code = isset($_REQUEST["billing_zip_code"]) ? $_REQUEST["billing_zip_code"] : '';
//        $billing_cust_country = isset($_REQUEST["billing_cust_country"]) ? $_REQUEST["billing_cust_country"] : '';
//        $billing_cust_tel = isset($_REQUEST["billing_cust_tel"]) ? $_REQUEST['billing_cust_tel'] : '';
//        $billing_cust_email = isset($_REQUEST["billing_cust_email"]) ? $_REQUEST["billing_cust_email"] : '';
//
//        $card_category = isset($_REQUEST["card_category"]) ? $_REQUEST["card_category"] : '';
//        $cart_id = (int)str_replace('COD_', '', $OrderId);
//        $cart = new Cart($cart_id);
//        $extraVars = array('transaction_id' => $nb_order_no);
//
//            $this->validateOrder((int)$cart->id, (int)Configuration::get('COD_PARTIAL_PAYMENT_SUCCESS'), (float)$Amount, 'COD', 'Your credit card has been charged and the advance amount for order is successfully received.', $extraVars, null, false, $cart->secure_key);
//
//            $orders = $this->getAllOrdersForGivenCart((int)$cart->id);
//
//            $customer_message_sql = 'Select message from ' . _DB_PREFIX_ . 'message Where id_cart = '. $cart_id . ' and id_order = '. $orders[0]['id_order'] .' ';
//            $customer_message = Db::getInstance()->ExecuteS($customer_message_sql);
//
//            $context->cookie->balanceCOD = null;
//            $billingAddress = array('firstname' => $billing_cust_name, 'lastname' => '', 'state' => $billing_cust_state, 'phone' => $billing_cust_tel, 'postcode' => $billing_zip_code, 'city' => $billing_cust_city, 'address1' => $billing_cust_address, 'address2' => '', 'country' => $billing_cust_country);
//
//            $billing = new Address($context->cart->id_address_invoice);
//            $SMS_Mobile = $billing->phone_mobile;
//            $this->sendMessage($orders[0]['reference'], $Amount, $SMS_Mobile);
//
//            $this->sendEmailToCustomer($billingAddress, $orders[0]['reference'], $orders[0]['id_order'], $Amount, 1,$customer_message[0]['message']);
//
//            $redirect = __PS_BASE_URI__ . 'module/cod/success';
//            header('Location: ' . $redirect);
//            exit;
//
//
//    }

    //test function for testing payment status pending
//    public function validation()
//    {
//        $context = context::getContext();
//        $card_expiration = '';
//        $card_holder = '';
//        $MerchantId = isset($_REQUEST["Merchant_Id"]) ? $_REQUEST["Merchant_Id"] : '';
//        $OrderId = isset($_REQUEST["Order_Id"]) ? $_REQUEST["Order_Id"] : '';
//        $Amount = isset($_REQUEST["Amount"]) ? $_REQUEST["Amount"] : '';
//        $AuthDesc = isset($_REQUEST["AuthDesc"]) ? $_REQUEST["AuthDesc"] : '';
//        $avnChecksum = isset($_REQUEST["Checksum"]) ? $_REQUEST["Checksum"] : '';
//        $nb_order_no = isset($_REQUEST["nb_order_no"]) ? $_REQUEST['nb_order_no'] : '';
//
//        //as we are not getting card number from ccavenue we are using this field for storing whether emi 3 months used or 6 months used
//        $card_number = isset($_REQUEST["Merchant_Param"]) ? $_REQUEST["Merchant_Param"] : '';
//        //and card holder is used to store percentage of EMI processing fee
//        if ($card_number == '3_months') {
//            $card_holder = Configuration::get('EMI_CCAVENUE_3_MONTHS_TAX');
//            $workingKey = Configuration::get('WORKING_KEY_EMI_3_MONTHS');
//            $merchantIdUsed = Configuration::get('_MERCHANT_ID_EMI_CCAVENUE_3');
//            $context->cookie->emi = $this->getEMIAmount($this->context->cart->getOrderTotal(true, Cart::BOTH), $Amount);
//        } elseif ($card_number == '6_months') {
//            $card_holder = Configuration::get('EMI_CCAVENUE_6_MONTHS_TAX');
//            $merchantIdUsed = Configuration::get('_MERCHANT_ID_EMI_CCAVENUE_6');
//            $workingKey = Configuration::get('WORKING_KEY_EMI_6_MONTHS');
//            $context->cookie->emi = $this->getEMIAmount($this->context->cart->getOrderTotal(true, Cart::BOTH), $Amount);
//        }
//        $Checksum = verifyChecksumEMI($merchantIdUsed, $OrderId, $Amount, $AuthDesc, $workingKey, $avnChecksum);
//        $billing_cust_name = isset($_REQUEST["billing_cust_name"]) ? $_REQUEST["billing_cust_name"] : '';
//        $billing_cust_address = isset($_REQUEST["billing_cust_address"]) ? $_REQUEST["billing_cust_address"] : '';
//        $billing_cust_state = isset($_REQUEST["billing_cust_state"]) ? $_REQUEST["billing_cust_state"] : '';
//        $billing_cust_city = isset($_REQUEST["billing_cust_city"]) ? $_REQUEST["billing_cust_city"] : '';
//        $billing_zip_code = isset($_REQUEST["billing_zip_code"]) ? $_REQUEST["billing_zip_code"] : '';
//        $billing_cust_country = isset($_REQUEST["billing_cust_country"]) ? $_REQUEST["billing_cust_country"] : '';
//        $billing_cust_tel = isset($_REQUEST["billing_cust_tel"]) ? $_REQUEST['billing_cust_tel'] : '';
//        $billing_cust_email = isset($_REQUEST["billing_cust_email"]) ? $_REQUEST["billing_cust_email"] : '';
//
//        $card_category = isset($_REQUEST["card_category"]) ? $_REQUEST["card_category"] : '';
//        $cart_id = (int)str_replace('EMI_', '', $OrderId);
//        $cart = new Cart($cart_id);
//        $extraVars = array('transaction_id' => $nb_order_no);
//        $this->validateOrder((int)$cart->id, (int)Configuration::get('CCAVENUE_EMI_PENDING_STATUS'), (float)$Amount, $this->displayName, $this->l('The transaction is in pending verification'), $extra_vars, null, false, $cart->secure_key);
//            //finding order for EMI
//            $orders = $this->getAllOrdersForGivenCart((int)$cart->id);
//            $orderWiseAdvancePaymentMapping = array();
//            $orderWiseAmount = $this->getEMIPaymentAmountOrderWise($orders, $card_holder);
//            $existing_id_currency = 1;
//            $existing_conversion_rate = 1.000000;
//            if (!empty($orders)) {
//                $orderReference = $orders[0]['reference'];
//            }
//            foreach ($orders as $key => $singleOrder) {
//                $EMIPayment = $orderWiseAmount[$singleOrder['id_order']];
//                Db::getInstance()->insert('order_payment', array(
//                    'id_currency' => (int)$existing_id_currency,
//                    'amount' => $EMIPayment,
//                    'payment_method' => pSQL('EMI'),
//                    'conversion_rate' => $existing_conversion_rate,
//                    'transaction_id' => $nb_order_no,
//                    'card_number' => $card_number,
//                    'card_brand' => $card_category,
//                    'card_expiration' => $card_expiration,
//                    'card_holder' => $card_holder,
//                    'date_add' => date('Y-m-d H:i:s'),
//                    'order_reference' => $orderReference
//                ));
//                $last_insert_payment_id = Db::getInstance()->insert_id();
//                Db::getInstance()->insert('order_invoice_payment', array(
//                    'id_order_invoice' => (int)$singleOrder['invoice_number'],
//                    'id_order_payment' => (int)($last_insert_payment_id),
//                    'id_order' => (int)($singleOrder['id_order']),
//                ));
//                $orderWiseAdvancePaymentMapping[] = array('amount' => $EMIPayment, 'orderId' => $singleOrder['id_order'], 'reference' => $singleOrder['reference'] . '#' . ($key + 1), 'id_address_delivery' => $singleOrder['id_address_delivery']);
//            }
//
//            //removing EMI Amount from cookie
//            $context->cookie->emi = null;
//            $redirect = __PS_BASE_URI__ . 'module/emi/success';
//            header('Location: ' . $redirect);
//            exit;
//
//    }

    public static function getShopDomainSsl($http = false, $entities = false)
    {
        if (method_exists('Tools', 'getShopDomainSsl'))
            return Tools::getShopDomainSsl($http, $entities);
    }


    public function getAllOrdersForGivenCart($cartId)
    {
        $sqlQuery = 'Select * from ' . _DB_PREFIX_ . 'orders where id_cart=' . $cartId;
        $result = Db::getInstance()->executeS($sqlQuery);
        if ($result)
            return $result;
        return array();
    }

    private function getBalanceCODAmount($cartTotal, $amountPaid)
    {
        return ($cartTotal - $amountPaid);
    }


    function sendMessage($orderReference, $amount, $mobile)
    {
        try {
            $message = sprintf(_CCAVENUE_COD_SUCCESS, $orderReference, $amount);
            $username = _SMS_USERNAME;
            $password = _SMS_PASSWORD;
            //create api url to hit
            $sms_url = _SMS_URL;
            $senderId = _SMS_SENDERID;
            $sms_url = "$sms_url?user=$username&password=$password&sender=$senderId&mobiles=$mobile&message=" . urlencode($message);
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $sms_url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, '6');
            $result = curl_exec($ch);
            $error = curl_error($ch);
            $http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

        } catch (Exception $e) {
            //consuming exception
        }

    }


    private
    function sendEmailToCustomer($billingAddress, $orderReference, $orderId, $amount, $order_paid_status,$customer_order_message)
    {
        $order = new Order($orderId);
        $products_list = '';
        $cartList = '';
        $virtual_product = true;
        $products = $order->getProducts();
        $cartRules = $order->getCartRules();
        foreach ($products as $key => $product) {
            $productName = ProductCore::getProductName($product['product_id']);
            $unit_price = $product['product_price_wt'];

            $customization_text = '';
            if (isset($customized_datas[$product['product_id']][$product['product_attribute_id']])) {

                foreach ($customized_datas[$product['product_id']][$product['product_attribute_id']] as $customization) {
                    if (isset($customization['datas'][_CUSTOMIZE_TEXTFIELD_]))
                        foreach ($customization['datas'][_CUSTOMIZE_TEXTFIELD_] as $text)
                            $customization_text .= $text['name'] . ': ' . $text['value'] . '<br />';

                    if (isset($customization['datas'][_CUSTOMIZE_FILE_]))
                        $customization_text .= count($customization['datas'][_CUSTOMIZE_FILE_]) . ' ' . $this->l('image(s)') . '<br />';

                    $customization_text .= '---<br />';
                }

                $customization_text = rtrim($customization_text, '---<br />');
            }

            $products_list .=
                '<tr style="background-color:' . ($key % 2 ? '#DDE2E6' : '#EBECEE') . ';">
					<td style="padding:0.6em 0.4em;">' . $product['product_reference'] . '</td>
					<td style="padding:0.6em 0.4em;">
						<strong>'
                . $productName .
                '</strong>
            </td>
            <td style="padding:0.6em 0.4em; text-align:right;">' . Tools::displayPrice($unit_price, $this->context->currency, false) . '</td>
					<td style="padding:0.6em 0.4em; text-align:center;">' . (int)$product['product_quantity'] . '</td>
					<td style="padding:0.6em 0.4em; text-align:right;">' . Tools::displayPrice(($unit_price * $product['product_quantity']), $this->context->currency, false) . '</td>
				</tr>';
        }

        foreach ($cartRules as $discount) {
            $cartList .=
                '<tr style="background-color:#EBECEE;">
                        <td colspan="4" style="padding:0.6em 0.4em; text-align:right;">' . $this->l('Voucher code:') . ' ' . $discount['name'] . '</td>
					<td style="padding:0.6em 0.4em; text-align:right;">-' . Tools::displayPrice($discount['value'], $this->context->currency, false) . '</td>
			</tr>';
        }

        $delivery = new Address($order->id_address_delivery);
        $delivery_state = $delivery->id_state ? new State($delivery->id_state) : false;
        $adminSubject = sprintf(Mail::l('New Order - #%06d , COD', $order->id_lang), $order->id);
        $customerEmailTemplate = "order_conf";

        if($customer_order_message){
            $order_message = $customer_order_message;
        }else{
            $order_message = 'No customer message';
        }


        $data = array(
            '{firstname}' => $this->context->customer->firstname,
            '{lastname}' => $this->context->customer->lastname,
            '{email}' => $this->context->customer->email,
            '{delivery_block_txt}' => $this->getFormattedDeliveryAddress($delivery, false),
            '{invoice_block_txt}' => $this->getFormattedBillingAddress($billingAddress, false),
            '{delivery_block_html}' => $this->getFormattedDeliveryAddress($delivery, true),
            '{invoice_block_html}' => $this->getFormattedBillingAddress($billingAddress, true),
            '{delivery_company}' => $delivery->company,
            '{delivery_firstname}' => $delivery->firstname,
            '{delivery_lastname}' => $delivery->lastname,
            '{delivery_address1}' => $delivery->address1,
            '{delivery_address2}' => $delivery->address2,
            '{delivery_city}' => $delivery->city,
            '{delivery_postal_code}' => $delivery->postcode,
            '{delivery_country}' => $delivery->country,
            '{delivery_state}' => $delivery->id_state ? $delivery_state->name : '',
            '{delivery_phone}' => ($delivery->phone) ? $delivery->phone : $delivery->phone_mobile,
            '{delivery_other}' => $delivery->other,
            '{invoice_company}' => '',
            '{invoice_vat_number}' => '',
            '{invoice_firstname}' => $billingAddress['firstname'],
            '{invoice_lastname}' => $billingAddress['lastname'],
            '{invoice_address2}' => $billingAddress['address2'],
            '{invoice_address1}' => $billingAddress['address1'],
            '{invoice_city}' => $billingAddress['city'],
            '{invoice_postal_code}' => $billingAddress['postcode'],
            '{invoice_country}' => $billingAddress['country'],
            '{invoice_state}' => $billingAddress['state'],
            '{invoice_phone}' => $billingAddress['phone'],
            '{invoice_other}' => '',
            '{order_name}' => $orderReference,
            '{date}' => Tools::displayDate(date('Y-m-d H:i:s'), (int)$order->id_lang, 1),
            '{carrier}' => Tools::displayError('No carrier'),
            '{payment}' => 'Cash On Delivery',
            '{products}' => $products_list,
            '{discounts}' => $cartList,
            '{non_refundable_amount}' => Tools::displayPrice(750, $this->context->currency, false),
            '{advance_amount_paid}' => Tools::displayPrice($amount - 750, $this->context->currency, false),
            '{total_amount}' => Tools::displayPrice($order->total_paid, $this->context->currency, false),
            '{balance_to_paid}' => Tools::displayPrice($order->total_paid - $amount, $this->context->currency, false),
            '{total_products}' => Tools::displayPrice($order->total_paid - $order->total_shipping - $order->total_wrapping + $order->total_discounts, $this->context->currency, false),
            '{total_discounts}' => Tools::displayPrice($order->total_discounts, $this->context->currency, false),
            '{total_shipping}' => Tools::displayPrice($order->total_shipping, $this->context->currency, false),
            '{total_wrapping}' => Tools::displayPrice($order->total_wrapping, $this->context->currency, false),
            '{customer_message}' => $order_message
        );

        // Join PDF invoice
        if ((int)Configuration::get('PS_INVOICE') && $order->invoice_number) {
            $pdf = new PDF($order->getInvoicesCollection(), PDF::TEMPLATE_INVOICE, $this->context->smarty);
            $file_attachement['content'] = $pdf->render(false);
            $file_attachement['name'] = Configuration::get('PS_INVOICE_PREFIX', (int)$order->id_lang, null, $order->id_shop) . sprintf('%06d', $order->invoice_number) . '.pdf';
            $file_attachement['mime'] = 'application/pdf';
        } else
            $file_attachement = null;

        $logisticEmail = _CCAVENUE_COD_LOGISTIC_EMAIL;
        $receivableEmail = _CCAVENUE_COD_RECEIVABLE_EMAIL;
        $adminEmailTemplate = "order_conf_admin";

        if ($order_paid_status) {
            if (Validate::isEmail($this->context->customer->email)) {
                Mail::Send(
                    (int)$order->id_lang,
                    $customerEmailTemplate,
                    sprintf(Mail::l('Order confirmation - #%06d , COD', (int)$order->id_lang),$order->id),
                    $data,
                    $this->context->customer->email,
                    $this->context->customer->firstname . ' ' . $this->context->customer->lastname,
                    null,
                    null,
                    $file_attachement,
                    null, getcwd() . '/', false, (int)$order->id_shop
                );
            }


            Mail::Send(
                (int)$order->id_lang,
                $adminEmailTemplate,
                Mail::l($adminSubject, (int)$order->id_lang),
                $data,
                $logisticEmail,
                'Administrator',
                null,
                null,
                $file_attachement,
                null, getcwd() . '/', false, (int)$order->id_shop
            );

            Mail::Send(
                (int)$order->id_lang,
                $adminEmailTemplate,
                Mail::l($adminSubject, (int)$order->id_lang),
                $data,
                $receivableEmail,
                'Administrator',
                null,
                null,
                $file_attachement,
                null, getcwd() . '/', false, (int)$order->id_shop
            );

        } else {
            $adminEmailErrorTemplate = 'order_conf_admin_error';
            $adminSubject = sprintf(Mail::l('New order payment fail - #%06d , COD', $order->id_lang), $order->id);

            Mail::Send(
                (int)$order->id_lang,
                $adminEmailErrorTemplate,
                Mail::l($adminSubject, (int)$order->id_lang),
                $data,
                $logisticEmail,
                'Administrator',
                null,
                null,
                $file_attachement,
                null, getcwd() . '/', false, (int)$order->id_shop
            );

            Mail::Send(
                (int)$order->id_lang,
                $adminEmailErrorTemplate,
                Mail::l($adminSubject, (int)$order->id_lang),
                $data,
                $receivableEmail,
                'Administrator',
                null,
                null,
                $file_attachement,
                null, getcwd() . '/', false, (int)$order->id_shop
            );
        }

    }

    private
    function getFormattedDeliveryAddress($address, $html = true)
    {
        if ($html) {
            return '<strong>' . $address->firstname . ' ' . $address->lastname . '</strong><br/>' . $address->address1 .
            '<br>' . $address->address2 . '<br>' . $address->city . ',' . $address->state . '<br>' . $address->country . '<br>' . $address->postcode;

        }

        return $address->firstname . ' ' . $address->lastname . '\r\n' . $address->address1 .
        '\r\n' . $address->address2 . '\r\n' . $address->city . ',' . $address->state . '\r\n' . $address->country . '\r\n' . $address->postcode;
    }

    private
    function getFormattedBillingAddress($address, $html = true)
    {

        if ($html) {
            return '<strong>' . $address['firstname'] . ' ' . $address['lastname'] . '</strong><br/>' . $address['address1'] .
            '<br>' . $address['address2'] . '<br>' . $address['city'] . ',' . $address['state'] . '<br>' . $address['country'] . '<br>' . $address['postcode'];

        }

        return $address['firstname'] . ' ' . $address['lastname'] . '\r\n' . $address['address1'] .
        '\r\n' . $address['address2'] . '\r\n' . $address['city'] . ',' . $address['state'] . '\r\n' . $address['country'] . '\r\n' . $address['postcode'];
    }


}
